import psycopg2  # Import psycopg2 for PostgreSQL connections
from psycopg2.extras import RealDictCursor  # Use RealDictCursor to get dictionaries as rows

# ✅ 1. Fetch schema (table.column (type))
def get_schema(db_url: str) -> str:
    query = """
    SELECT table_name, column_name, data_type
    FROM information_schema.columns
    WHERE table_schema = 'public'
    ORDER BY table_name, ordinal_position;
    """
    schema = ""
    try:
        # Use psycopg2.connect to establish the connection
        with psycopg2.connect(db_url) as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute(query)
                rows = cur.fetchall()
                for row in rows:
                    schema += f"{row['table_name']}.{row['column_name']} ({row['data_type']})\n"
    except Exception as e:
        schema = f"Error fetching schema: {str(e)}"
    return schema


# ✅ 2. Fetch sample data (rows from each table)
def get_sample_rows(db_url: str, max_tables: int = 3, max_rows: int = 5) -> str:
    sample_text = ""
    try:
        with psycopg2.connect(db_url) as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                # Get a few public tables
                cur.execute("""
                SELECT table_name
                FROM information_schema.tables
                WHERE table_schema = 'public'
                LIMIT %s
                """, (max_tables,))
                tables = [row['table_name'] for row in cur.fetchall()]

                # For each table, get a few sample rows
                for table in tables:
                    cur.execute(f"SELECT * FROM {table} LIMIT %s", (max_rows,))
                    rows = cur.fetchall()
                    sample_text += f"\nTable: {table}\n"
                    for row in rows:
                        sample_text += f"{row}\n"
    except Exception as e:
        sample_text += f"Error fetching samples: {str(e)}"
    return sample_text


# ✅ 3. Run the final SQL generated by Gemini
def run_sql(db_url: str, sql: str):
    try:
        with psycopg2.connect(db_url) as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute(sql)

                # If it's a SELECT query, return the rows
                if cur.description:
                    return cur.fetchall()
                else:
                    conn.commit()
                    return {"message": "Query executed successfully."}
    except Exception as e:
        return {"error": str(e)}
